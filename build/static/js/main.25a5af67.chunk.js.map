{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifs","setGifs","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","onInputChange","target","value","connectWallet","sendGif","length","useEffect","onLoad","addEventListener","removeEventListener","className","onSubmit","event","preventDefault","type","placeholder","onChange","map","gif","src","alt","onClick","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAAe,G,MAAA,IAA0B,0C,OCKnCA,EAAiB,cACjBC,EAAY,8BAA0BD,GAEtCE,EAAY,CAChB,0DACA,sIACA,sIACA,2DA6HaC,EA1HH,WACV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAwB,iDAAG,gHAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAIvBA,EAAOC,UAJgB,wBAKzBC,QAAQC,IAAI,2BALa,SAMFH,EAAOI,QAAQ,CAAEC,eAAe,IAN9B,QAMnBC,EANmB,SAOTA,EAASC,WACvBd,EAAiBa,EAASC,UAAUC,YAEtCN,QAAQC,IAAR,uBAA4BG,EAASC,UAAUC,aAVtB,gCAa3BC,MAAM,oDAbqB,0DAgB7BP,QAAQQ,MAAR,MAhB6B,0DAAH,qDAmBxBC,EAAgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACvBjB,EAAciB,EAAOC,MACtB,EAEKC,EAAa,iDAAG,uGACDf,SAAXC,EADY,EACZA,QADY,gCAGKA,EAAOI,UAHZ,OAGZE,EAHY,OAIlBb,EAAiBa,EAASC,UAAUC,YAJlB,2CAAH,qDAkBbO,EAAO,iDAAG,wFACVrB,EAAWsB,OAAS,GACtBd,QAAQC,IAAI,YAAaT,GACzBG,EAAQ,GAAD,mBAAKD,GAAL,CAAWF,KAClBC,EAAc,KACTO,QAAQC,IAAI,gBALL,2CAAH,qDAmDb,OAbAc,qBAAU,WACR,IAAMC,EAAM,iDAAG,wGACPpB,IADO,2CAAH,qDAIZ,OADAC,OAAOoB,iBAAiB,OAAQD,GACzB,kBAAMnB,OAAOqB,oBAAoB,OAAQF,EAAzC,CACR,GAAE,IAEHD,qBAAU,WACJzB,GACFK,EAAQR,EAEX,GAAE,CAACG,IAEF,qBAAK6B,UAAU,MAAf,SACE,sBAAKA,UAAW7B,EAAgB,mBAAqB,YAArD,UACE,sBAAK6B,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,qCACA,mBAAGA,UAAU,WAAb,8DAGC7B,EAjDL,sBAAK6B,UAAU,sBAAf,UACE,uBACEC,SAAQ,iDAAE,WAAOC,GAAP,kFACRA,EAAMC,iBADE,SAEFT,IAFE,2CAAF,sDADV,UAME,uBACEU,KAAK,OACLC,YAAY,mBACZb,MAAOnB,EACPiC,SAAUhB,IACT,IACH,wBAAQc,KAAK,SAASJ,UAAU,+BAAhC,uBAIF,qBAAKA,UAAU,WAAf,SACGzB,EAAKgC,KAAI,SAACC,GAAD,OACR,qBAAKR,UAAU,WAAf,SACE,qBAAKS,IAAKD,EAAKE,IAAKF,KADSA,EADvB,SArCd,wBACER,UAAU,mCACVW,QAASlB,EAFX,+BAwEE,sBAAKO,UAAU,mBAAf,UACE,qBAAKU,IAAI,eAAeV,UAAU,eAAeS,IAAKG,IACtD,mBACEZ,UAAU,cACVa,KAAM9C,EACNwB,OAAO,SACPuB,IAAI,aAJN,6BAKehD,YAKxB,EClIDiD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,Q","file":"static/js/main.25a5af67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n  \"https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp\",\n  \"https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g\",\n  \"https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g\",\n  \"https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp\",\n];\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifs, setGifs] = useState([]);\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet is found\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          if (response && response.publicKey) {\n            setWalletAddress(response.publicKey.toString());\n          }\n          console.log(`Connected to ${response.publicKey.toString()}`);\n        }\n      } else {\n        alert(\"Solana object not found ! Get a phantom wallet !\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const onInputChange = ({ target }) => {\n    setInputValue(target.value);\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n    if (solana) {\n      const response = await solana.connect();\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n  const renderNotConnectedContainer = () => {\n    return (\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        Connect Wallet\n      </button>\n    );\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Gif link:\", inputValue);\n      setGifs([...gifs, inputValue]);\n      setInputValue(\"\");\n    } else console.log(\"Empty input.\");\n  };\n\n  const renderConnectedContainer = () => {\n    return (\n      <div className=\"connected-container\">\n        <form\n          onSubmit={async (event) => {\n            event.preventDefault();\n            await sendGif();\n          }}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Enter gid link !\"\n            value={inputValue}\n            onChange={onInputChange}\n          />{\" \"}\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">\n            Submit\n          </button>\n        </form>\n        <div className=\"gif-grid\">\n          {gifs.map((gif) => (\n            <div className=\"gif-item\" key={gif}>\n              <img src={gif} alt={gif} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      setGifs(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {walletAddress\n            ? renderConnectedContainer()\n            : renderNotConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}